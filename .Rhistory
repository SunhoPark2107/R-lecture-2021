select(cut, carat) %>%
group_by(cut) %>%
summarise(ca_n = n(carat))
diamonds %>%
select(cut, carat) %>%
group_by(carat) %>%
summarise(ca_n = n())
diamonds %>%
select(cut, carat) %>%
group_by(cut) %>%
summarise(ca_n = n())
ggplot(diamonds, aes(cut, carat, size = carat)) +
geom_point()
ggplot(diamonds, aes(cut, carat, size = n(carat)) +
geom_point()
ggplot(diamonds, aes(cut, carat, size = n(carat)) +
geom_point()
ggplot(diamonds, aes(cut, carat, col = cut)) +
geom_boxplot() + ggtitle("carat by cut chart")
ggplot(diamonds, aes(cut, carat, col = cut)) +
geom_boxplot() + ggtitle("carat by cut chart", size = 20)
head(diamonds)
ggplot(diamonds, aes(cut, price, col = cut)) +
geom_line(col = "orange"0)
ggplot(diamonds, aes(cut, price, col = cut)) +
geom_line(col = "orange")
ggplot(diamonds, aes(cut, price, col = cut)) +
geom_boxplot()
diamonds %>%
group_by(cut) %>%
summarise(avg_price = mean(price)) %>%
ggplot(aes(cut, avg_price, col = cut)) +
geom_bar(stat = "identity")
diamonds %>%
group_by(cut) %>%
summarise(avg_price = mean(price)) %>%
ggplot(aes(cut, avg_price, fill = cut)) +
geom_bar(stat = "identity")
diamonds %>%
group_by(cut) %>%
summarise(avg_carat = mean(carat)) +
geom_bar(stat = 'identity')
diamonds %>%
group_by(cut) %>%
summarise(avg_carat = mean(carat)) %>%
ggplot(aes(cut, avg_carat)) +
geom_bar(stat = 'identity')
diamonds %>%
group_by(cut) %>%
summarise(avg_carat = mean(carat)) %>%
ggplot(aes(cut, avg_carat, fill = cut)) +
geom_bar(stat = 'identity')
ggplot(diamonds, aes(cut, price, col = color)) +
geom_point()
ggplot(diamonds, aes(cut, price)) +
geom_point()
ggplot(data = diamonds, aes(x = carat, y = price)) +
geom_point()
ggplot(diamonds, aes(cut, carat, col = cut)) +
geom_boxplot() + ggtitle("Carat by Cut chart")
diamonds %>%
group_by(cut) %>%
summarise(avg_carat = mean(carat)) %>%
ggplot(aes(cut, avg_carat, fill = cut)) +
geom_bar(stat = 'identity')
diamonds %>%
group_by(cut) %>%
summarise(avg_carat = mean(carat)) %>%
ggplot(aes(cut, avg_carat, fill = cut)) +
geom_line()
diamonds %>%
group_by(cut) %>%
summarise(avg_carat = mean(carat)) %>%
ggplot(aes(cut, avg_carat)) +
geom_line()
diamonds %>%
select(cut, color, price)
diamonds %>%
select(cut, color, price) %>%
group_by(cut) %>%
summarise(avg_cutprice = mean(price))
ggplot(diamonds, aes(color, avg_cutprice))+
geom_bar(stat = "identity")
diamonds %>%
group_by(cut) %>%
summarise(avg_cutprice = mean(price))
ggplot(diamonds, aes(color, avg_cutprice))+
geom_bar(stat = "identity")
glimpse(diamonds)
source('C:/workspace/R/ch06 단원문제.R', encoding = 'UTF-8', echo=TRUE)
library(tidyr)                 # 여러 개의 변수를 하나의 변수로 묶어 주는 것.
# 모든 데이터를 일렬로 쫙 세워버리는것.
# (모든 변수들은 key 열로 들어가고, 거기에 속해있는 값들은 전부 value 열로 들어가!)
# 2-1 airquality
head(airquality)
str(airquality)
air_tidy <- gather(airquality, key = 'Measure', value = 'Value', -Day, -Month)
head(air_tidy)
tail(air_tidy)
dim(airquality)
dim(air_tidy)
air_tidy %>%
ggplot(aes(Day, Value, col=Measure)) +
geom_point() +
facet_wrap(~Month)
# 2-2 iris
iris_tidy <- gather(iris, key = 'feat', value = 'value', -Species)
head(iris_tidy)
tail(iris_tidy)
iris_tidy %>%
ggplot(aes(feat, value, col=Species)) +
geom_point(position='jitter')       # 지터Jitter는 데이터 값에 약간의 노이즈를 추가하는 방법을 말한다. 노이즈를 추가하면 데이터 값이 조금씩 움직여서 같은 값을 가지는 데이터가 그래프에 여러 번 겹쳐서 표시되는 현상을 막아준다.
# 겹쳐진 데이터를 보이게 하는 다른 방법으로는 alpha = n 을 주는 방법도 있다.(투명도 조절)
# 3. ggplot2를 이용하여 Iris 데이터 셋에 대해서 다음 문제를 푸세요.
### 1) 품종별로 Sepal/Petal의 Length, Width 산점도 그리기. (총 6개)
library(gridExtra)
seto <- filter(iris, Species == 'setosa')
vers <- filter(iris, Species == 'versicolor')
virg <- filter(iris, Species == 'virginica')
seto_s <- seto %>%
ggplot(aes(Sepal.Length, Sepal.Width, col = Species)) +
geom_point()
seto_p <- seto %>%
ggplot(aes(Petal.Length, Petal.Width, col=Species)) +
geom_point()
vers_s <- vers %>%
ggplot(aes(Sepal.Length, Sepal.Width, col=Species)) +
geom_point()
vers_p <- vers %>%
ggplot(aes(Petal.Length, Petal.Width, col=Species)) +
geom_point()
virg_s <- virg %>%
ggplot(aes(Sepal.Length, Sepal.Width, col=Species)) +
geom_point()
virg_p <- virg %>%
ggplot(aes(Petal.Length, Petal.Width, col=Species)) +
geom_point()
grid.arrange(seto_s, seto_p, vers_s, vers_p, virg_s, virg_p, ncol = 2)
### 3-2) 품종별 Sepal/Petal의 Length/Width 평균을 비교하되
### 항목을 옆으로 늘어놓은 것(beside=T)과 위로 쌓아올린 것 2개를 그리시오.
# barplot + legend
seto_mean <- apply(iris[iris$Species == 'setosa', 1:4], 2, mean)
vers_mean <- apply(iris[iris$Species == 'versicolor', 1:4], 2, mean)
virg_mean <- apply(iris[iris$Species == 'virginica', 1:4], 2, mean)
mean_of_iris <- rbind(seto_mean, vers_mean, virg_mean)
mean_of_iris
# barplot(첫번째 데이터는 배열(matrix)형태여야 함. 위에서 mean_of_iris 는 rbind로 배열 형태가 되었음.)
barplot(mean_of_iris, beside = T,
main = '품종별 평균', ylim = c(0,8), col = c('red', 'green', 'blue'))
legend('topright',
legend = c('Setosa', 'Versicolor', 'Virginica'),
fill = c('red', 'green', 'blue'))
levels(iris$Species)
# ggplot으로 그리기
mean_of_iris     # 한 줄로 나래비를 세우기. (변수는 key열로 모여! 값은 value열로 모여!)
df <- iris %>%
group_by(Species) %>%
summarise(Sepal_length = mean(Sepal.Length), Sepal_width=mean(Sepal.Width),
Petal_length=mean(Petal.Length), Petal_width = mean(Petal.Width))
df
df_tidy <- gather(df, key = 'Feature', value = 'Value', -Species)
df_tidy
ggplot(df_tidy, aes(x = Feature, y = Value, fill = Species)) +           # bar 그래프에서는 col =  대신 fill = 로 사용한다.
geom_bar(stat = 'identity')                                          # bar plot에서 stat = 'identity'는 선택사항 아닌 필수.
ggplot(df_tidy, aes(x = Feature, y = Value, fill = Species)) +
geom_bar(stat = 'identity', position = 'dodge')
### (총 12개 항목의 데이터를 2개의 그래프에)
### 3) 박스 플롯 그리기
par(mflow=c(3, 1))    # 3행 1열의 그래프. 즉, 그래프를 세로로 3개 한 장면 안에 넣겠다는 것.
boxplot(seto$Sepal.Length, seto$Sepal.Width)
# ggplot 으로 그리기
seto_tidy <- gather(seto, key = 'Feature', value = 'Value', -Species)
head(seto_tidy)
s1 <- ggplot(seto_tidy, aes(x=Feature, y=Value, col = Feature)) +
geom_boxplot() +
ggtitle('Setosa')
s1
vers_tidy <- gather(vers, key = 'Feature', value = 'Value', -Species)
virg_tidy <- gather(virg, key = 'Feature', value = 'Value', -Species)
s2 <- ggplot(vers_tidy, aes(x=Feature, y=Value, col = Feature)) +
geom_boxplot() +
ggtitle('Versicolor')
s3 <- ggplot(virg_tidy, aes(x=Feature, y=Value, col = Feature)) +
geom_boxplot() +
ggtitle('Virginica')
grid.arrange(s1, s2, s3, ncol = 1)
diamonds %>%
filter(cut == "Fair") , %>%
group_by(color) %>%
summarise(avg_Fine = mean(price)) %>%
ggplot(aes(color, avg_Fine)) +
geom_bar(stat = "identity")
glimpse(diamonds)
diamonds %>%
filter(cut == "Fair")
diamonds %>%
filter(cut == "Fair") %>%
group_by(color) %>%
summarise(avg_Fine = mean(price)) %>%
ggplot(aes(color, avg_Fine)) +
geom_bar(stat = "identity")
diamonds %>%
filter(cut == "Fair") %>%
group_by(color) %>%
summarise(avg_Fine = mean(price)) %>%
ggplot(aes(color, avg_Fine, col = color)) +
geom_bar(stat = "identity")
diamonds %>%
filter(cut == "Fair") %>%
group_by(color) %>%
summarise(avg_Fine = mean(price)) %>%
ggplot(aes(color, avg_Fine, fill = color)) +
geom_bar(stat = "identity")
d1 <- diamonds %>%
filter(cut == "Fair") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_Fine, fill = color)) +
geom_bar(stat = "identity")
d2 <- diamonds %>%
filter(cut == "Good") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_Fine, fill = color)) +
geom_bar(stat = "identity")
d3 <- diamonds %>%
filter(cut == "Very Good") %>%
group_by(color) %>%
summarise(avg_Fine = mean(price)) %>%
ggplot(aes(color, avg_Fine, fill = color)) +
geom_bar(stat = "identity")
d4 <- diamonds %>%
filter(cut == "Premium") %>%
group_by(color) %>%
summarise(avg_Fine = mean(price)) %>%
ggplot(aes(color, avg_Fine, fill = color)) +
geom_bar(stat = "identity")
d5 <- diamonds %>%
filter(cut == "Ideal") %>%
group_by(color) %>%
summarise(avg_Fine = mean(price)) %>%
ggplot(aes(color, avg_Fine, fill = color)) +
geom_bar(stat = "identity")
grid.arrange(d1, d2, d3, d4, d5, ncol = 1)
d1 <- diamonds %>%
filter(cut == "Fair") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_cutprice, fill = color)) +
geom_bar(stat = "identity")
d2 <- diamonds %>%
filter(cut == "Good") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_cutprice, fill = color)) +
geom_bar(stat = "identity")
d3 <- diamonds %>%
filter(cut == "Very Good") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_cutprice, fill = color)) +
geom_bar(stat = "identity")
d4 <- diamonds %>%
filter(cut == "Premium") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_cutprice, fill = color)) +
geom_bar(stat = "identity")
d5 <- diamonds %>%
filter(cut == "Ideal") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_cutprice, fill = color)) +
geom_bar(stat = "identity")
grid.arrange(d1, d2, d3, d4, d5, ncol = 1)
d1 <- diamonds %>%
filter(cut == "Fair") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_cutprice, fill = color)) +
geom_bar(stat = "identity") +
ggtitle("Fair")
d2 <- diamonds %>%
filter(cut == "Good") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_cutprice, fill = color)) +
geom_bar(stat = "identity") +
ggtitle("Good")
d3 <- diamonds %>%
filter(cut == "Very Good") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_cutprice, fill = color)) +
geom_bar(stat = "identity") +
ggtitle("Very Good")
d4 <- diamonds %>%
filter(cut == "Premium") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_cutprice, fill = color)) +
geom_bar(stat = "identity") +
ggtitle("Premium")
d5 <- diamonds %>%
filter(cut == "Ideal") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_cutprice, fill = color)) +
geom_bar(stat = "identity") +
ggtitle("Ideal")
grid.arrange(d1, d2, d3, d4, d5, ncol = 1)
scale_fill_brewer()
scale_fill_brewer()
p + scale_fill_brewer()
ggplot(scale_fill_brewer())
display.brewer.all()
library(RColorBrewer)
display.brewer.all()
d1 <- diamonds %>%
filter(cut == "Fair") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_cutprice, fill = color)) +
geom_bar(stat = "identity") +
ggtitle("Fair") + scale_fill_brewer(palette="set1")
d2 <- diamonds %>%
filter(cut == "Good") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_cutprice, fill = color)) +
geom_bar(stat = "identity") +
ggtitle("Good") + scale_fill_brewer(palette="set2")
d3 <- diamonds %>%
filter(cut == "Very Good") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_cutprice, fill = color)) +
geom_bar(stat = "identity") +
ggtitle("Very Good") + scale_fill_brewer(palette="set3")
d4 <- diamonds %>%
filter(cut == "Premium") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_cutprice, fill = color)) +
geom_bar(stat = "identity") +
ggtitle("Premium") + scale_fill_brewer(palette="pastel1")
d5 <- diamonds %>%
filter(cut == "Ideal") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_cutprice, fill = color)) +
geom_bar(stat = "identity") +
ggtitle("Ideal") + scale_fill_brewer(palette="pastel2")
grid.arrange(d1, d2, d3, d4, d5, ncol = 1)
d1 <- diamonds %>%
filter(cut == "Fair") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_cutprice, fill = color)) +
geom_bar(stat = "identity") +
ggtitle("Fair") + scale_fill_brewer(palette="Set1")
d2 <- diamonds %>%
filter(cut == "Good") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_cutprice, fill = color)) +
geom_bar(stat = "identity") +
ggtitle("Good") + scale_fill_brewer(palette="Set2")
d3 <- diamonds %>%
filter(cut == "Very Good") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_cutprice, fill = color)) +
geom_bar(stat = "identity") +
ggtitle("Very Good") + scale_fill_brewer(palette="Set3")
d4 <- diamonds %>%
filter(cut == "Premium") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_cutprice, fill = color)) +
geom_bar(stat = "identity") +
ggtitle("Premium") + scale_fill_brewer(palette="Pastel1")
d5 <- diamonds %>%
filter(cut == "Ideal") %>%
group_by(color) %>%
summarise(avg_cutprice = mean(price)) %>%
ggplot(aes(color, avg_cutprice, fill = color)) +
geom_bar(stat = "identity") +
ggtitle("Ideal") + scale_fill_brewer(palette="Pastel2")
grid.arrange(d1, d2, d3, d4, d5, ncol = 1)
ggplot(diamonds, aes(cut, carat, col = cut)) +
geom_boxplot() + ggtitle("Carat by Cut chart")
diamonds %>%
group_by(cut) %>%
summarise(avg_carat = mean(carat)) %>%
ggplot(aes(cut, avg_carat, fill = cut)) +
geom_bar(stat = 'identity')
diamonds %>%
group_by(cut) %>%
summarise(avg_carat = mean(carat)) %>%
ggplot(aes(cut, avg_carat, fill = cut)) +
geom_bar(stat = 'identity') + ggtitle("Carat by Cut Chart") + xlab("Cut Style") + ylab("Average Carat")
diamonds %>%
group_by(cut) %>%
summarise(avg_carat = mean(carat)) %>%
ggplot(aes(cut, avg_carat, fill = cut)) +
geom_bar(stat = 'identity') +
scale_fill_brewer(palette="Pastel1") +
ggtitle("Carat by Cut Chart") + xlab("Cut Style") + ylab("Average Carat")
diamonds %>%
group_by(cut) %>%
summarise(avg_carat = mean(carat)) %>%
ggplot(aes(cut, avg_carat, fill = cut)) +
geom_bar(stat = 'identity') +
scale_fill_brewer(palette="Pastel2") +
ggtitle("Carat by Cut Chart") + xlab("Cut Style") + ylab("Average Carat")
diamonds %>%
group_by(cut) %>%
summarise(avg_price = mean(price)) %>%
ggplot(aes(cut, avg_price, fill = cut)) +
geom_bar(stat = "identity") +
scale_fill_brewer(palette="Pastel2") +
ggtitle("Price by Cut Chart") + xlab("Cut Style") + ylab("Average Price")
ggplot(mpg, aes(cty, hwy, col = class)) +
geom_point()
grid.arrange(d1, d2, d3, d4, d5, nrow = 2, ncol = 3)
ggplot(diamonds, aes(cut, fill = cut)) +
geom_bar()
ggplot(diamonds, aes(cut, fill = cut)) +
geom_bar() +
scale_fill_brewer(palette="Pastel1") +
ggtitle("Average Carat by Cut Chart") + xlab("Cut Style") + ylab("Average Carat")
qplot(diamonds)
?qplot
qplot(diamonds, cut, price)
qplot(diamonds, cut, Price)
qplot(mpg, wt, data = mtcars)
qplot(diamonds, colors, cut)
ggplot(mpg, aes(cty, hwy, col = class)) +
geom_point(position="jitter")
dim(mpg)
ggplot(mpg, aes(class, fill = class)) +
geom_bar()
ggplot(diamonds, aes(cut, fill = cut)) +
geom_bar()
ggplot(diamonds, aes(cut, fill = cut)) +
geom_bar()+
scale_fill_brewer(palette="Pastel1") +
ggtitle("Frequency by Cut Chart") + xlab("Cut style") + ylab("Frequency")
ggplot(mpg, aes(class, fill = class)) +
geom_bar()
mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(avg_cty = mean(cty)) %>%
arrange(desc(avg_cty)) %>%
head(5) %>%
ggplot(aes(reorder(manufacturer, -avg_cty), avg_cty, fill = manufacturer))+
geom_bar(stat = 'identity')
mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(avg_cty = mean(cty)) %>%
arrange(desc(avg_cty)) %>%
head(5) %>%
ggplot(aes(reorder(manufacturer, -avg_cty), avg_cty, fill = manufacturer))+
geom_bar(stat = 'identity') + scale_x_continuous(breaks=seq(5, 20, 2))
mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(avg_cty = mean(cty)) %>%
arrange(desc(avg_cty)) %>%
head(5) %>%
ggplot(aes(reorder(manufacturer, -avg_cty), avg_cty, fill = manufacturer))+
geom_bar(stat = 'identity')
scale_x_continuous(breaks=seq(5, 20, 2))
midwest %>%
filter(poptotal <= 500000, popasian <= 10000) %>%
ggplot(aes(poptotal, popasian, col = state)) +
geom_point(position='jitter')
mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(avg_cty = mean(cty)) %>%
arrange(desc(avg_cty)) %>%
head(5) %>%
ggplot(aes(reorder(manufacturer, -avg_cty), avg_cty, fill = manufacturer))+
geom_bar(stat = 'identity') + coord_cartesian(xlim = c(60, 80), ylim = c(2:4))
mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(avg_cty = mean(cty)) %>%
arrange(desc(avg_cty)) %>%
head(5) %>%
ggplot(aes(reorder(manufacturer, -avg_cty), avg_cty, fill = manufacturer))+
geom_bar(stat = 'identity') + coord_cartesian(xlim = c(1), ylim = c(1:20))
mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(avg_cty = mean(cty)) %>%
arrange(desc(avg_cty)) %>%
head(5) %>%
ggplot(aes(reorder(manufacturer, -avg_cty), avg_cty, fill = manufacturer))+
geom_bar(stat = 'identity') + coord_cartesian( , ylim = c(1:20))
mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(avg_cty = mean(cty)) %>%
arrange(desc(avg_cty)) %>%
head(5) %>%
ggplot(aes(reorder(manufacturer, -avg_cty), avg_cty, fill = manufacturer))+
geom_bar(stat = 'identity')
