함수 사용법 모르겠을 땐 구글링 하거나 ?함수 (도움말 함수) 사용하기.

str(x)
  :데이터 셋 요약정보(데이터 셋 형식, 샘플,행,열 개수, 변수 속성 등)

summary(x)
 : 데이터 요약통계 한번에 보기.


plot(x, col = 'color', xlab = 'name', ylab = 'name' pch = 1~25) 
  :그래프 그려 주는 함수.

*** col=값 이름 으로 주면, 데이터 종류에 따라 각각 다르게 색을 지정함.

ggplot2 사용법

%>%(파이프)는 dplyr(디플라이)가 제공하는 명령어를 연결하는 연산자.
그래프 형식에는 histogram(히스토그램), point(산점도), Bar(막대그래프), boxplot(박스플롯) 등이 있다.(더 다양함. 향후 차트 공부 따로 하기.)

데이터셋명%>%ggplot(aes(변수명))+geom_그래프형식(aes(col=각기 다른 색을 줄 변수명, pch=각기 다른 점 모양을 줄 변수명), size = 점 크기 숫자로 표현)+labs(title="제목", x = "x축 제목, y = "y축 제목")

getwd()
  :현재 작업 디렉토리 확인

setwd("/C:/경로")
  :작업 디렉토리 지정

head/tail(x, 출력할 값 개수)
  :맨 위(맨 아래)에서부터 몇 개의 데이터 출력.

패키지 설치법

install.packages("설치할 패키지명")
library(부착할 패키지명)
search() => 설치된 패키지 확인
ls(package:패키지명) => 패키지(라이브러리)가 제공하는 모든 함수 목록.


temp = 값
  :임시 공간에 값을 저장해 둔다.\


<데이터형 확인 함수>
class(x)
  :R 객체지향 관점에서 x의 데이터형

typeof(x)
  :R 언어 자체 관점에서 x의 데이터형

is.integer(x)
  :x가 정수형이면 TRUE, 아니면 FALSE

is.numeric(x)
  :x가 실수형이면 TRUE, 아니면 FALSE

is.complex(x)
  :x가 복소수형이면 TRUE, 아니면 FALSE

is.character(x)
  :x가 문자형이면 TRUE, 아니면 FALSE
is.na(x)

  :x가 NA(결측값)이면 TRUE, 아니면 FALSE


<데이터형 변환 함수>
as.factor(x) : 범주형으로 변환
as.integer(x) : 정수형으로 변환
as.numeric(x) : 숫자형으로 변환.
as.character(x) : 문자형으로 변환.
as.matrix(x) : 행렬로 변환.
as.array(x) : 배열로 변환.

<산술 연산자>
^ 또는 ** : 지수승
x %% y : modulo. x를 y로 나눈 나머지.
x %/% y : x를 y로 나눈 몫.(정수 나눗셈 몫)

<논리 연산자>
**************************************************************
좌변과 우변이 같다! 헷갈리기 쉬운데,
일반 등호 아니고 == 이다!(등호 두 개 이어 놓은 것.)
**************************************************************
x|y, x||y : OR, 합집합
x&y, x&&y : AND, 교집합
is true : x의 true 여부 판단.
!= : 좌우가 다르다.(좌변과 우변은 같지 않다.)
!x : 부정.(not)

**************************************************************
논리식 not(p and q) 는 (not p) or (not q) 로 나타낼 수 있다.

**************************************************************

벡터

vector(length = n) : 요소가 n개인 빈 벡터 사용.

c(a:b) : a~b 요소로 구성된 벡터 생성. a:b와 동일.

c(a, b, c, c(d:z)) : a, b, c와 d:z를 결합한 a:z 요소로 구성된 벡터 생성.

x=c, y = c 으로 벡터를 변수로 저장.

순열 벡터
seq(from = 초기값, to = 종료값, by = 증가값)
seq(초기값, 종료값, by = 증가값) 이렇게 써도 된다.
seq(초기값, 종료값, length.out=n) => 초기값부터 종료값까지, n개의 등비수열 생성.

반복 벡터

rep(c(a:b), times = n) :  a:b가 n번 반복되는 벡터 생성.
rep(c(a:b), each = n) :  각 요소가 n번씩 출력되는 벡터 생성.

벡터 연산

length(x) => x 벡터의 길이(크기)를 구함.
x[n] => x 벡터의 n번째 요소의 값을 출력.
/////////////////////////////////////////////////  x[1, 2, 3] => 벡터의 1, 2, 3번째 값을 구할 때 이렇게 치면 오류.
x[c(1, 2, 3) => 벡터의 1, 2, 3번 요소를 구할 때는 벡터로 묶어야 한다.
x[-c(1, 2, 3)] => 벡터의 1, 2, 3번 요소를 제외한 값들을 출력.

벡터끼리 연산을 수행할 때는 벡터의 길이가 같거나 / 벡터 요소 개수가 "배수의 관계" 에 있을 때 가능하다. (ex. 1:4 벡터와 1:8벡터 연산시, 1:4 벡터가 두 번 반복하여 1:8 벡터와 연산됨.)

all(조건) : 벡터의 모든 요소가 조건을 만족하는가?(T/F)
any(조건) : 벡터의 요소 중 조건을 만족하는 요소가 하나라도 있는가?(T/F)

배열(행렬)

배열을 생성하는 함수: array(N차원 배열 생성), matrix(2차원 배열 생성), cbind, rbind(기존 벡터를 묶어서 배열 생성)

array 함수
x = array(a:b, c(a, b)) => x = array(벡터 데이터, c(행 수, 열 수)) 즉, (데이터, 행렬사이즈)

행 이름, 열 이름을 설정한 배열 만들기

namex = list(c("1st", "2nd"), c("1st", "2nd", "3rd", 4th"))
x = array(a:b, c(2, 4), dimnames = namex)

=> 행은 1st, 2nd 두 개 변수, 열은 1st, 2nd, 3rd, 4th 네 개 변수로 구성된 행렬 생성됨.

matrix함수

matrix(x, nrow = n) => 행렬로 구성할 벡터 x, 행 또는 열의 개수 둘중 하나 지정해주기
matrix(x, nrow = n, byrow = T)  => byrow = T로 지정해 줄 경우, 데이터를 행 단위로 배치해 줌.(가로 방향으로 데이터 정렬.)

rbind, cbind 함수

rbind/cbind(벡터 1, 벡터 2, 벡터 3, ... 벡터 n)

벡터 여러 개를 행 또는 열 단위로 묶어서 배열로 만듦.

배열 인덱스
x [1, ] => 1행 요소 출력
x [, 2] => 2열 요소 출력

인덱스[] 를 통해 배열에서 요소 추출하고자 할 때, 행과 열을 둘 다 지정해 주어야 한다는 것을 잊지 말자!

배열 연산자

+,-     행렬 덧/뺄셈
*       열별 곱셈
%*%   수학적인 행렬 곱셈.
t(), aperm() 전치 행렬
solve() 역행렬
det()    행렬식

(중요) **apply함수
apply(x, 1, 연산함수) => x배열에 행 기준(1)으로 연산함수 적용(mean, median, sum 등등...)
apply(x, 2, 연산함수) => x배열에 열 기준(2)으로 연산함수 적용

dim(x) => x행렬의 크기(차원의 수) 출력.

sample(x) => 배열 요소 임의로 추출.
sample(x, n) => n개의 배열 요소를 임의로 추출.
sample(x, n, prob = 0보다 크고 1보다 작은 확률을 지정. 단, 배열의 요소 수 만큼을 지정해 주어야 한다.)
 => 요소별 추출 확률에 가중치를 주어 확률을 달리할 수 있음. 단, 반드시 모든 배열 요소의 확률을 지정해 주어야 함.
sample(10) => 1부터 10중에서 아무거나 무작위로 추출.